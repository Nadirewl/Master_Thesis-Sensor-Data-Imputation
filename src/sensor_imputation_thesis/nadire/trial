import pandas as pd
from pathlib import Path
import hashlib
from data_insight import setup_duckdb
from duckdb import DuckDBPyConnection as DuckDB
from duckdb import DuckDBPyRelation as Relation

pd.set_option('display.max_columns', None)

def load_engine_data(
    con: DuckDB, product_id: str, start: pd.Timestamp, stop: pd.Timestamp, tags: list[str]
) -> Relation:
    return con.sql(f"""
    SELECT {','.join(tags)}
    FROM timeseries
    WHERE
        time BETWEEN '{start}' AND '{stop}'
        AND pid = '{product_id}'
    """)

def get_tags_hash(tags):
    return hashlib.md5(','.join(tags).encode()).hexdigest()

start, stop = pd.Timestamp("2023-10-01"), pd.Timestamp("2024-10-01")

tags = [
        "time",
        "fr_eng",
        "te_exh_cyl_out__0",
        "te_exh_cyl_out__1",
        "te_exh_cyl_out__2",
        "te_exh_cyl_out__3",
        "te_exh_cyl_out__4",
        "te_exh_cyl_out__5",
        "te_exh_cyl_out__6",
        "pd_air_ic__0",
        "pr_exh_turb_out__0",
        "pr_exh_turb_out__1",
        "pr_exh_turb_out__2",
        "pr_exh_turb_out__3",
        "te_air_ic_out__0",
        "te_air_ic_out__1",
        "te_air_ic_out__2",
        "te_air_ic_out__3",
        "te_seawater",
        "te_air_comp_in_a__0",
        "te_air_comp_in_a__1",
        "te_air_comp_in_a__2",
        "te_air_comp_in_a__3",
        "fr_tc__0",
        "fr_tc__1",
        "fr_tc__2",
        "fr_tc__3",
        "pr_baro",
        "te_exh_turb_in__0",
        "te_exh_turb_in__1",
        "te_exh_turb_in__2",
        "te_exh_turb_in__3",
        "te_exh_turb_out__0",
        "te_exh_turb_out__1",
        "te_exh_turb_out__2",
        "te_exh_turb_out__3",
        "pr_exh_rec",
        "pr_air_scav",
        "pr_air_scav_ecs",
        "fr_eng_setpoint",
        "te_air_ic_out__0",
        "te_air_ic_out__1",
        "te_air_ic_out__2",
        "te_air_ic_out__3",
        "pd_air_ic__0",
        "pd_air_ic__1",
        "pd_air_ic__2",
        "pd_air_ic__3",
        "pr_cyl_max__0",
        "pr_cyl_max__1",
        "pr_cyl_max__2",
        "pr_cyl_max__3",
        "pr_cyl_max__4",
        "pr_cyl_max__5",
        "pr_cyl_max__6",
        "pr_cyl_max__7",
        "pr_cyl_max__8",
        "pr_cyl_max__9",
        "pr_cyl_max__10",
        "pr_cyl_max__11"
        ]
product_id = "89ccb7a888d53f8792f0580801cede9a"


 # Define the base_path (I don't know if this is necessary process, but file can't be saved properly without this line
 #if it's others' computer, might need to change the path here)
base_path = Path('/home/ec2-user/SageMaker/sensor-imputation-thesis/src/sensor_imputation_thesis/nadire')

# Construct the cache file path using the Path class
cache = Path.home() / f'SageMaker/data_cache/data_{get_tags_hash(tags)}_{product_id}_{start}_{stop}.parquet'

# Ensure the directory exists
cache.parent.mkdir(parents=True, exist_ok=True)

if cache.exists():
    df = pd.read_parquet(cache)
else:
    con = setup_duckdb()
    df = load_engine_data(con, product_id, start, stop, tags).df()
    df.to_parquet(cache)

print(df.head(10))